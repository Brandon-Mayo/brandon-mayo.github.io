knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(plotly)
flights <- read.csv("rawflight.csv")
airports <- read.csv("airports.csv")
clean_ports <- airports %>%
transmute(
airport_id, name, state, city
) %>%
mutate(OriginAirportID=airport_id, OriginAirportID=as.numeric(OriginAirportID)) %>%
mutate(DestAirportID=airport_id, DestAirportID=as.numeric(DestAirportID))
clean_flights <- flights %>%
transmute(week_day=wday(DayOfWeek, label=T, abbr=T),
Carrier, DepDelay, ArrDelay, OriginAirportID, DestAirportID) %>%
mutate(OriginAirportID=as.numeric(OriginAirportID), DestAirportID=as.numeric(DestAirportID))
ave_delays_states <- clean_flights %>%
group_by(OriginAirportID) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
left_join(clean_ports, by = c("OriginAirportID" = "airport_id")) %>%
ungroup() %>%
group_by(state) %>%
slice_max(ave_departure_delay, n = 2)
#Chicago airport id's: 13232, 13930
clean_flights %>%
filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
ggplot() +
geom_density(aes(x = DepDelay, color = "DepDelay"), na.rm = TRUE) +  # Specify color as "DepDelay"
geom_density(aes(x = ArrDelay, color = "ArrDelay"), na.rm = TRUE) +  # Specify color as "ArrDelay"
geom_vline(xintercept = 0, linetype = "dashed") +
labs(
title = "Distribution of Departure and Arrival Delays",
x = "Delay (minutes)",
y = "Density",
color = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv
Figure 1")+
scale_x_continuous(limits = c(-120, 120)) +
scale_color_manual(values = c("#66c2a5", "#fc8d62"), labels=c("Arrival", "Delay"))
clean_flights %>%
filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
group_by(week_day) %>%
summarize(avg_dep_delay = mean(DepDelay),
avg_arr_delay = mean(ArrDelay)) %>%
pivot_longer(cols = c(avg_dep_delay, avg_arr_delay),
names_to = "delay_type",
values_to = "avg_delay") %>%
ggplot(aes(x = week_day, y = avg_delay, fill = delay_type)) +
geom_col(position = "dodge", alpha=.8) +
geom_text(position = position_dodge(width = .9), vjust = -0.45, aes(label=round(avg_delay, 2))) +
labs(
title = "Average Delay on Days of the Week",
x = "Day",
y = "",
fill = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv
Figure 2") +
scale_fill_manual(values=c("#66c2a5", "#fc8d62"),labels=c("Arrival Delay", "Departure Delay"))
ave_delays_carrier <- clean_flights %>%
group_by(Carrier) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
arrange(desc(ave_departure_delay)) %>%
mutate(Carrier = factor(Carrier, levels = Carrier))
ggplot(ave_delays_carrier,
aes(x=Carrier, y=ave_departure_delay, fill=Carrier))+
geom_bar(stat="identity", alpha=.8) +
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62")) +
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airline",
subtitle = "All Airports",
y = "",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv
Figure 3") +
theme(legend.position = "none")
chicago_land_airports <- clean_flights %>%
filter(OriginAirportID %in% c("13232", "13930"))
ave_delays_carrier_chicago <- chicago_land_airports %>%
group_by(Carrier) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
arrange(desc(ave_departure_delay)) %>%
mutate(Carrier = factor(Carrier, levels = Carrier))
ggplot(ave_delays_carrier_chicago,
aes(x=Carrier, y=ave_departure_delay, fill=Carrier))+
geom_bar(stat="identity", alpha=.8) +
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5")) +
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airline",
subtitle = "Airports Midway and O'Hare",
y="",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv
Figure 4") +
theme(legend.position = "none")
ave_delays_ports <- clean_flights %>%
group_by(OriginAirportID) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
merge(.,clean_ports, by.x="OriginAirportID", by.y="airport_id") %>%
slice_max(ave_departure_delay, n=10) %>%
mutate(name = reorder(name, -ave_departure_delay))
ggplot(ave_delays_ports,
aes(x=ave_departure_delay, y=factor(name), fill=factor(name)))+
geom_bar(stat="identity", alpha=.8)+
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62"))+
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airports",
subtitle = "Ten Highest Airports",
y="Airport",
x="",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv
Figure 5") +
theme(legend.position = "none")
reticulate::repl_python()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
coloraxis_colorbar_title="Average Departure Delay")
fig.show()
quit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(plotly)
library(pandas)
install.packages(pandas)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(plotly)
library(panda)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(plotly)
reticulate::repl_python()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
coloraxis_colorbar_title="Average Departure Delay")
fig.show()
quit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
install.packages(maps)
"maps"
install.packages(maps)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
library("maps")
install.packages("maps")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
library(plotly)
reticulate::repl_python()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
coloraxis_colorbar_title="Average Departure Delay")
fig.show()
pip install pandas
pip install plotly
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
coloraxis_colorbar_title="Average Departure Delay")
fig.show()
pip install pandas
pip install pandas
exit
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
use_python("/path/to/python")
