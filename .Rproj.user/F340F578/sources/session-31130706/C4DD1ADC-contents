geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
sdev <- pca_prep$steps[[2]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)
tibble(
component = unique(tidied_pca$component),
percent_var = percent_variation
) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(component, percent_var)) +
geom_col() +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = NULL, y = "Percent variance explained by each PCA component")
model_pca <- lm(Sale_Price ~ PC1, data=baked_pca)
tidy(model_pca)
glance(model_pca)
ames_sub <- ames %>%
select(Sale_Price, matches("(SF$)|(Gr_Liv)"))
View(ames_sub)
pca_rec <- recipe(Sale_Price ~ ., data=ames_sub) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(
all_numeric_predictors(),
num_comp = 7, # number of principal components to keep, default 5
)
pca_prep <- prep(pca_rec)
baked_pca <- bake(
pca_prep,
new_data=NULL
)
View(baked_pca)
ggpairs(baked_pca %>% select(-Sale_Price))
tidied_pca <- tidy(pca_prep, 2)
tidied_pca
View(pca_prep)
model_pca <- lm(Sale_Price ~ PC1 + PC2, data=baked_pca)
tidy(model_pca)
glance(model_pca)
model_pca <- lm(Sale_Price ~ PC1 + PC2 + PC3, data=baked_pca)
tidy(model_pca)
glance(model_pca)
model_pca <- lm(Sale_Price ~ PC1 + PC2 + PC3 + PC4, data=baked_pca)
tidy(model_pca)
glance(model_pca)
model_pca <- lm(Sale_Price ~ PC1 + PC2 + PC3 + PC4 + PC5, data=baked_pca)
tidy(model_pca)
glance(model_pca)
model_pca <- lm(Sale_Price ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=baked_pca)
tidy(model_pca)
glance(model_pca)
model_pca <- lm(Sale_Price ~ PC1 + PC2 + PC3 + PC4 + PC5, data=baked_pca)
tidy(model_pca)
glance(model_pca)
pca_rec <- recipe(Sale_Price ~ ., data=ames_sub) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(
all_numeric_predictors(),
num_comp = 7, # number of principal components to keep, default 5
threshold = .76
)
View(pca_rec)
pca_prep <- prep(pca_rec)
baked_pca <- bake(
pca_prep,
new_data=NULL
)
View(pca_prep)
View(baked_pca)
pca_rec <- recipe(Sale_Price ~ ., data=ames_sub) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(
all_numeric_predictors(),
num_comp = 7, # number of principal components to keep, default 5
)
pca_prep <- prep(pca_rec)
baked_pca <- bake(
pca_prep,
new_data=NULL
)
library(diamonds)
library(ggplot2)
data(diamonds)
library(ggplot2)
library(tidyverse)
```{r}
library(ggplot2)
data(diamonds)
glimpse(diamonds)
ggplot(
data = diamonds,
mapping = aes(x=price) +
geom_histogram(mapping=aes(color=color, shape=clarity))
)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
## Note that this code chunk will not appear in your knitted file because of the option `include=FALSE`
## First, we load packages we need.If you get an error, make sure you have these installed by running the following code. You only need to install once, but you must load packages everytime you start a new project.
# install.packages("tidyverse")
# install.packages("palmerpenguins")
library(tidyverse)
library(palmerpenguins)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping=aes(color = species, shape = species)) +
geom_smooth() +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)",
y = "Body mass (g)",
color = "Species",
shape = "Species"
)
ggplot(
data = diamonds,
mapping = aes(x=price) +
geom_histogram(mapping=aes(color=color, size=clarity))
)
ggplot(
data = diamonds,
mapping = aes(x=price) +
geom_histogram(mapping=aes(color=color))
)
ggplot(
data = diamonds,
mapping = aes(x=price)) +
geom_histogram(mapping=aes(color=color, shape=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price)) +
geom_histogram(mapping=aes(color=color))
ggplot(
data = diamonds,
mapping = aes(x=price)) +
geom_histogram(mapping=aes(colorfill=color))
ggplot(
data = diamonds,
mapping = aes(x=price)) +
geom_histogram(mapping=aes(color=color))
ggplot(
data = diamonds,
mapping = aes(x=price)) +
geom_histogram(mapping=aes(fill=color))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=50)) +
geom_histogram(mapping=aes(fill=color))
View(diamonds)
ggplot(
data = diamonds,
mapping = aes(x=price, bins=50)) +
geom_histogram(mapping=aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=500)) +
geom_histogram(mapping=aes(fill=clarity))
View(diamonds)
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)+
geom_point()
)
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat) +
geom_point()
)
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point()
ggplot(
data = diamonds,
mapping = aes(x=clarity, bins=500)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point()
ggplot(
data = diamonds,
mapping = aes(x=clarity, y=price, bins=500)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=clarity, bins=500)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=clarity, bins=500)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point()
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut, shape=color))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut))
?diamonds
ggplot(
data = diamonds,
mapping = aes(x=clarity, y=price)
)
ggplot(
data = diamonds,
mapping = aes(x=clarity, y=price)
) +
geom_histogram()
ggplot(
data = diamonds,
mapping = aes(x=clarity, bins=500)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut))
ggplot(
data = diamonds,
mapping = aes(x=clarity)
) +
geom_histogram(aes(fill=price))
ggplot(
data = diamonds,
mapping = aes(x=clarity)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=clarity)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut))
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=depth)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins 5000)
ggplot(
data = diamonds,
mapping = aes(x=price, bins 5000)
ggplot(
data = diamonds,
mapping = aes(x=clarity)) +
geom_bar(mapping=aes(fill=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, y=carat)) +
geom_point(aes(color=cut))
ggplot(
data = diamonds,
mapping = aes(x=price, bins 5000)
ggplot(
data = diamonds,
mapping = aes(x=price, bins=50)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=500)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=5000)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=5)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=500)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price, bins=5)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity, bins=5000))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity, bin=5000))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity, binwidth=5000))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity, binwidth=500))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity, binwidth=50))
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_histogram(aes(fill=clarity))
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot()
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(bins=500)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=500)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=5)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=1)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.0001)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.001)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.01)
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_dotplot(binwidth=500)
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_dotplot(binwidth=5000)
ggplot(
data = diamonds,
mapping = aes(x=price)
) +
geom_dotplot(binwidth=50)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=5)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.01)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.1)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=..05)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(binwidth=.05)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(aes(fill=color), binwidth=.05)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(aes(fill=color), binwidth=.04)
?binwidth
help(binwidth)
ggplot(
data = diamonds,
mapping = aes(x=carat)
) +
geom_dotplot(aes(fill=cut), binwidth=.04)
setwd("~/Senior Spring/Data Visualization/brandon-mayo.github.io")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata) # for reading in data
library(lubridate) # for dealing with date-time data
years_ago <- mdy("01/01/2022") # data from last 2 years. May take time to load!
crash_url <- glue::glue("https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if?$where=CRASH_DATE >= '{years_ago}'")
crash_raw <- as_tibble(read.socrata(crash_url)) # a new way to read in data, don't worry about it!
crash <- crash_raw %>%
arrange(desc(crash_date)) %>%
transmute(
injuries = as.factor(if_else(injuries_total > 0, "injuries", "none")),
report_type = replace(crash_raw$report_type, crash_raw$report_type == "", "Unknown"),
# choose your variables here (use ?transmute to see what this does)
latitude, longitude, crash_date
)
ggplot(
crash %>% filter(latitude > 0),
mapping=aes(x=longitude, y=latitude)
) +
geom_point(mapping=aes(color=injuries))
ggplot(
crash_raw %>% filter(prim_contributory_cause != "UNABLE TO DETERMINE"),
aes(x=prim_contributory_cause)
)+
geom_bar()+
coord_flip()
crash_2022 <- crash_raw %>% filter(as.Date(crash_date) >= as.Date('2022-01-01') & as.Date(crash_date) <= as.Date('2022-12-31'))
crash_2023 <- crash_raw %>% filter(as.Date(crash_date) >= as.Date('2023-01-01') & as.Date(crash_date) <= as.Date('2023-12-31'))
combined_years <- bind_rows(
mutate(crash_2022, year = 2022),
mutate(crash_2023, year = 2023)
)
ggplot(combined_years, aes(x = crash_month, fill = as.factor(year))) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Crashes by Month",
subtitle = "2022 and 2023",
x="Month",
y="Number of Crashes",
fill="Year")
ggplot(
crash_raw %>%
filter(weather_condition == "RAIN" & (lighting_condition == "DARKNESS" | lighting_condition == "DARKNESS, LIGHTED ROAD")) %>%
mutate(injuries = if_else(injuries_total > 0, "injuries", "none")),
aes(x = injuries)
) +
geom_bar(aes(fill=injuries)) +
labs(title = "Crashes in Rain and Darkenss by Injury Status")
snow <- crash_raw %>% filter(weather_condition == "SNOW")
rain <- crash_raw %>% filter(weather_condition == "RAIN")
clear <- crash_raw %>% filter(weather_condition == "CLEAR")
cloudy <- crash_raw %>% filter(weather_condition == "CLOUDY/OVERCAST")
combined_conditions <- bind_rows(
mutate(snow, condition = "Snow"),
mutate(rain, condition = "Rain"),
mutate(cloudy, condition = "Cloudy/Overcast")
)
ggplot(combined_conditions %>%
mutate(injuries = if_else(injuries_total > 0, "injuries", "none")),
aes(x = injuries)
) +
geom_bar(aes(fill=injuries)) +
labs(title = "Injuries by Condition",
subtitle = "Cloudy, Rain, & Snow",
y = "Number of Crashes",
x = "Injury Occurance") +
facet_wrap(~condition, scales = "free_y") +
scale_x_discrete(labels = c("No Injuries", "Injuries"))  +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
